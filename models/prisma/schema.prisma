generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id          Int           @id @default(autoincrement())
  roomID      String        @unique
  description String
  type        RoomType
  size        RoomSize
  price       Float
  pictures    RoomPicture[]
  isAvailable Boolean       @default(true)
  bookings    BookingRoom[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model RoomPicture {
  id     Int    @id @default(autoincrement())
  url    String
  room   Room   @relation(fields: [roomId], references: [id])
  roomId Int
}

model Service {
  id          Int              @id @default(autoincrement())
  serviceID   String           @unique
  name        String
  description String
  unit        String
  price       Float
  bookings    BookingService[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Booking {
  id              Int              @id @default(autoincrement())
  bookingNumber   String           @unique
  user            User             @relation(fields: [userId], references: [id])
  userId          Int
  startDate       DateTime
  endDate         DateTime
  totalAmount     Float
  status          BookingStatus    @default(PENDING)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  bookingRooms    BookingRoom[]
  bookingServices BookingService[]
  promotion       Promotion?       @relation(fields: [promotionId], references: [id])
  promotionId     Int?
  payments        Payment[] // Thêm quan hệ với Payment
}

model BookingRoom {
  id        Int     @id @default(autoincrement())
  booking   Booking @relation(fields: [bookingId], references: [id])
  bookingId Int
  room      Room    @relation(fields: [roomId], references: [id])
  roomId    Int
}

model BookingService {
  id         Int     @id @default(autoincrement())
  booking    Booking @relation(fields: [bookingId], references: [id])
  bookingId  Int
  service    Service @relation(fields: [serviceId], references: [id])
  serviceId  Int
  quantity   Int     @default(1)
  totalPrice Float
}

model Payment {
  id              Int           @id @default(autoincrement())
  paymentID       String        @unique
  booking         Booking       @relation(fields: [bookingId], references: [id])
  bookingId       Int
  amount          Float
  method          PaymentMethod
  status          PaymentStatus
  transactionDate DateTime      @default(now())
  transactionID   String?
  approveUrl      String?
}

model Promotion {
  id          Int       @id @default(autoincrement())
  promoID     String    @unique
  name        String
  description String
  value       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
}

enum RoomType {
  VIP
  DELUX
  LIVING_SUITE
}

enum RoomSize {
  SINGLE
  DOUBLE
  TRIPLE
  FAMILY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  CHECKED_IN
  CHECKED_OUT
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}
